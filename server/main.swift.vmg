#set ($language="Swift")
#set ($description="Swift Server")
#set ($author="Evol Johnson")
#set ($overwrite="true")
#set ($enabled="true")
#set ($filep="main.swift")
#parse("common/utils.parse")
#set ($filename="${outputDir}/Sources/${filep}")

import KituraSys
import KituraNet
import KituraRouter

import LoggerAPI
import HeliumLogger

${h}if os(Linux)
    import Glibc
${h}endif

import Foundation

${h}if os(OSX)
    import Mustache
${h}endif


// Example using templating of strings
${h}if os(OSX) // Mustache implented for OSX only yet
Router.sharedInstance.get("/") { _, response, next in
    defer {
        next()
    }
    do {

        let template = try Template(string: "Hello {{name}}\n" +
            "Your beard trimmer will arrive on {{format(date)}}.\n" +
            "{{#late}}" +
            "Well, on {{format(realDate)}} because of a Martian attack." +
            "{{/late}}")
        // Let template format dates with `{{format(...)}}`
        let dateFormatter = NSDateFormatter()
        dateFormatter.dateStyle = .MediumStyle
        template.registerInBaseContext("format", Box(dateFormatter))

        // The rendered data
        let data = [
            "name": "Arthur",
            "date": NSDate(),
            "realDate": NSDate().dateByAddingTimeInterval(60*60*24*3),
            "late": true
        ]
        var rendering = ""
        
        do {
            rendering = try template.render(Box(data))
        }
        catch {
            Log.error("Failed to render mustache template")
        }

        do {
            try response.status(HttpStatusCode.OK).end(rendering)
        }
        catch {
            Log.error("Failed to send response")
        }
    }
    catch {
        Log.error("Failed to create mustache template")
    }
}
${h}endif


// Listen on port 9000
let server = HttpServer.listen(Config.sharedInstance.port,delegate: Router.sharedInstance)

Server.run()